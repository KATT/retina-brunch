// Generated by CoffeeScript 1.6.3
var Retina, convert, exec, fs, info, path;

info = require('netpbm').info;

convert = require('netpbm').convert;

exec = require('child_process').exec;

fs = require('fs');

path = require('path');

module.exports = Retina = (function() {
  Retina.prototype.brunchPlugin = true;

  Retina.prototype.formats = ['gif', 'jpeg', 'jpg', 'png'];

  Retina.prototype._resize_binary = 'pnmscale';

  Retina.prototype.imagePath = 'images';

  Retina.prototype.retinaRe = /(@2x)\.(?:gif|jpeg|jpg|png)$/;

  function Retina(config) {
    var _ref, _ref1, _ref2, _ref3,
      _this = this;
    this.config = config;
    if ((_ref = this.config.plugins) != null ? (_ref1 = _ref.retina) != null ? _ref1.regexp : void 0 : void 0) {
      this.retinaRe = this.config.plugins.retina.regexp;
    }
    if ((_ref2 = this.config.plugins) != null ? (_ref3 = _ref2.retina) != null ? _ref3.path : void 0 : void 0) {
      this.imagePath = this.config.plugins.retina.path;
    }
    this.imagePath = path.join(this.config.paths["public"], this.imagePath);
    exec("" + this._resize_binary + " --version", function(error, stdout, stderr) {
      if (error) {
        return console.error("You need to have pnmscale installed. This is usually done with netpbm. Try brew install netpbm if you use homebrew.");
      }
    });
    null;
  }

  Retina.prototype.onCompile = function(generatedFiles) {
    var baseDirectory, f, imageFiles, r, retinaFiles, _i, _len, _results;
    baseDirectory = this.imagePath.replace(/\/$/, '');
    imageFiles = this.fetchFiles(baseDirectory);
    retinaFiles = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = imageFiles.length; _i < _len; _i++) {
        f = imageFiles[_i];
        if (this.retinaRe.test(f)) {
          _results.push(f);
        }
      }
      return _results;
    }).call(this);
    _results = [];
    for (_i = 0, _len = retinaFiles.length; _i < _len; _i++) {
      r = retinaFiles[_i];
      if (this.noNormal(r)) {
        _results.push(this.processRetina(r));
      }
    }
    return _results;
  };

  Retina.prototype.fetchFiles = function(directory) {
    var recursiveFetch;
    recursiveFetch = function(directory) {
      var d, directoryFiles, fileFiles, files, isDirectory, isFile, nextDirectories, prependBase, _i, _len;
      files = [];
      prependBase = function(filename) {
        return path.join(directory, filename);
      };
      isDirectory = function(filename) {
        return fs.statSync(prependBase(filename)).isDirectory();
      };
      isFile = function(filename) {
        return fs.statSync(prependBase(filename)).isFile();
      };
      directoryFiles = fs.readdirSync(directory);
      nextDirectories = directoryFiles.filter(isDirectory);
      fileFiles = directoryFiles.filter(isFile).map(prependBase);
      files = files.concat(fileFiles);
      for (_i = 0, _len = nextDirectories.length; _i < _len; _i++) {
        d = nextDirectories[_i];
        files = files.concat(recursiveFetch(prependBase(d)));
      }
      return files;
    };
    return recursiveFetch(directory);
  };

  Retina.prototype.processRetinas = function(retinas) {};

  return Retina;

})();
